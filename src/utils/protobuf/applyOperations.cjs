var b4a = require('b4a');
// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

exports.OperationType = {
  "UNKNOWN": 0,
  "ADD_ADMIN": 1,
  "APPEND_WHITELIST": 2,
  "ADD_WRITER": 3,
  "REMOVE_WRITER": 4,
  "POST_TX": 5,
  "ADD_INDEXER": 6,
  "REMOVE_INDEXER": 7,
  "BAN_WRITER": 8
}

var PostTxOperation = exports.PostTxOperation = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var BasicKeyOperation = exports.BasicKeyOperation = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var ExtendedKeyOperation = exports.ExtendedKeyOperation = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Operation = exports.Operation = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

definePostTxOperation()
defineBasicKeyOperation()
defineExtendedKeyOperation()
defineOperation()

function definePostTxOperation () {
  PostTxOperation.encodingLength = encodingLength
  PostTxOperation.encode = encode
  PostTxOperation.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.tx)) {
      var len = encodings.bytes.encodingLength(obj.tx)
      length += 1 + len
    }
    if (defined(obj.is)) {
      var len = encodings.bytes.encodingLength(obj.is)
      length += 1 + len
    }
    if (defined(obj.w)) {
      var len = encodings.bytes.encodingLength(obj.w)
      length += 1 + len
    }
    if (defined(obj.i)) {
      var len = encodings.bytes.encodingLength(obj.i)
      length += 1 + len
    }
    if (defined(obj.ipk)) {
      var len = encodings.bytes.encodingLength(obj.ipk)
      length += 1 + len
    }
    if (defined(obj.ch)) {
      var len = encodings.bytes.encodingLength(obj.ch)
      length += 1 + len
    }
    if (defined(obj.in)) {
      var len = encodings.bytes.encodingLength(obj.in)
      length += 1 + len
    }
    if (defined(obj.bs)) {
      var len = encodings.bytes.encodingLength(obj.bs)
      length += 1 + len
    }
    if (defined(obj.mbs)) {
      var len = encodings.bytes.encodingLength(obj.mbs)
      length += 1 + len
    }
    if (defined(obj.ws)) {
      var len = encodings.bytes.encodingLength(obj.ws)
      length += 1 + len
    }
    if (defined(obj.wp)) {
      var len = encodings.bytes.encodingLength(obj.wp)
      length += 1 + len
    }
    if (defined(obj.wn)) {
      var len = encodings.bytes.encodingLength(obj.wn)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.tx)) {
      buf[offset++] = 10
      encodings.bytes.encode(obj.tx, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (defined(obj.is)) {
      buf[offset++] = 18
      encodings.bytes.encode(obj.is, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (defined(obj.w)) {
      buf[offset++] = 26
      encodings.bytes.encode(obj.w, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (defined(obj.i)) {
      buf[offset++] = 34
      encodings.bytes.encode(obj.i, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (defined(obj.ipk)) {
      buf[offset++] = 42
      encodings.bytes.encode(obj.ipk, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (defined(obj.ch)) {
      buf[offset++] = 50
      encodings.bytes.encode(obj.ch, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (defined(obj.in)) {
      buf[offset++] = 58
      encodings.bytes.encode(obj.in, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (defined(obj.bs)) {
      buf[offset++] = 66
      encodings.bytes.encode(obj.bs, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (defined(obj.mbs)) {
      buf[offset++] = 74
      encodings.bytes.encode(obj.mbs, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (defined(obj.ws)) {
      buf[offset++] = 82
      encodings.bytes.encode(obj.ws, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (defined(obj.wp)) {
      buf[offset++] = 90
      encodings.bytes.encode(obj.wp, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (defined(obj.wn)) {
      buf[offset++] = 98
      encodings.bytes.encode(obj.wn, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      tx: null,
      is: null,
      w: null,
      i: null,
      ipk: null,
      ch: null,
      in: null,
      bs: null,
      mbs: null,
      ws: null,
      wp: null,
      wn: null
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.tx = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 2:
        obj.is = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 3:
        obj.w = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 4:
        obj.i = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 5:
        obj.ipk = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 6:
        obj.ch = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 7:
        obj.in = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 8:
        obj.bs = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 9:
        obj.mbs = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 10:
        obj.ws = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 11:
        obj.wp = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 12:
        obj.wn = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineBasicKeyOperation () {
  BasicKeyOperation.encodingLength = encodingLength
  BasicKeyOperation.encode = encode
  BasicKeyOperation.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.nonce)) {
      var len = encodings.bytes.encodingLength(obj.nonce)
      length += 1 + len
    }
    if (defined(obj.sig)) {
      var len = encodings.bytes.encodingLength(obj.sig)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.nonce)) {
      buf[offset++] = 10
      encodings.bytes.encode(obj.nonce, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (defined(obj.sig)) {
      buf[offset++] = 18
      encodings.bytes.encode(obj.sig, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      nonce: null,
      sig: null
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.nonce = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 2:
        obj.sig = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineExtendedKeyOperation () {
  ExtendedKeyOperation.encodingLength = encodingLength
  ExtendedKeyOperation.encode = encode
  ExtendedKeyOperation.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.wk)) {
      var len = encodings.bytes.encodingLength(obj.wk)
      length += 1 + len
    }
    if (defined(obj.nonce)) {
      var len = encodings.bytes.encodingLength(obj.nonce)
      length += 1 + len
    }
    if (defined(obj.sig)) {
      var len = encodings.bytes.encodingLength(obj.sig)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.wk)) {
      buf[offset++] = 10
      encodings.bytes.encode(obj.wk, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (defined(obj.nonce)) {
      buf[offset++] = 18
      encodings.bytes.encode(obj.nonce, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (defined(obj.sig)) {
      buf[offset++] = 26
      encodings.bytes.encode(obj.sig, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      wk: null,
      nonce: null,
      sig: null
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.wk = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 2:
        obj.nonce = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 3:
        obj.sig = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineOperation () {
  Operation.encodingLength = encodingLength
  Operation.encode = encode
  Operation.decode = decode

  function encodingLength (obj) {
    var length = 0
    if ((+defined(obj.bko) + +defined(obj.eko) + +defined(obj.txo)) > 1) throw new Error("only one of the properties defined in oneof value can be set")
    if (defined(obj.type)) {
      var len = encodings.enum.encodingLength(obj.type)
      length += 1 + len
    }
    if (defined(obj.key)) {
      var len = encodings.bytes.encodingLength(obj.key)
      length += 1 + len
    }
    if (defined(obj.bko)) {
      var len = BasicKeyOperation.encodingLength(obj.bko)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.eko)) {
      var len = ExtendedKeyOperation.encodingLength(obj.eko)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.txo)) {
      var len = PostTxOperation.encodingLength(obj.txo)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if ((+defined(obj.bko) + +defined(obj.eko) + +defined(obj.txo)) > 1) throw new Error("only one of the properties defined in oneof value can be set")
    if (defined(obj.type)) {
      buf[offset++] = 8
      encodings.enum.encode(obj.type, buf, offset)
      offset += encodings.enum.encode.bytes
    }
    if (defined(obj.key)) {
      buf[offset++] = 18
      encodings.bytes.encode(obj.key, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (defined(obj.bko)) {
      buf[offset++] = 26
      varint.encode(BasicKeyOperation.encodingLength(obj.bko), buf, offset)
      offset += varint.encode.bytes
      BasicKeyOperation.encode(obj.bko, buf, offset)
      offset += BasicKeyOperation.encode.bytes
    }
    if (defined(obj.eko)) {
      buf[offset++] = 34
      varint.encode(ExtendedKeyOperation.encodingLength(obj.eko), buf, offset)
      offset += varint.encode.bytes
      ExtendedKeyOperation.encode(obj.eko, buf, offset)
      offset += ExtendedKeyOperation.encode.bytes
    }
    if (defined(obj.txo)) {
      buf[offset++] = 42
      varint.encode(PostTxOperation.encodingLength(obj.txo), buf, offset)
      offset += varint.encode.bytes
      PostTxOperation.encode(obj.txo, buf, offset)
      offset += PostTxOperation.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      type: 0,
      key: null,
      bko: null,
      eko: null,
      txo: null
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.type = encodings.enum.decode(buf, offset)
        offset += encodings.enum.decode.bytes
        break
        case 2:
        obj.key = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 3:
        delete obj.eko
        delete obj.txo
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.bko = BasicKeyOperation.decode(buf, offset, offset + len)
        offset += BasicKeyOperation.decode.bytes
        break
        case 4:
        delete obj.bko
        delete obj.txo
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.eko = ExtendedKeyOperation.decode(buf, offset, offset + len)
        offset += ExtendedKeyOperation.decode.bytes
        break
        case 5:
        delete obj.bko
        delete obj.eko
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.txo = PostTxOperation.decode(buf, offset, offset + len)
        offset += PostTxOperation.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
