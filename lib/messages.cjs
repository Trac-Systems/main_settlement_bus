// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var AddAdmin = exports.AddAdmin = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineAddAdmin()

function defineAddAdmin () {
  var Value = AddAdmin.Value = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  defineValue()

  function defineValue () {
    Value.encodingLength = encodingLength
    Value.encode = encode
    Value.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.pub)) {
        var len = encodings.bytes.encodingLength(obj.pub)
        length += 1 + len
      }
      if (defined(obj.wk)) {
        var len = encodings.bytes.encodingLength(obj.wk)
        length += 1 + len
      }
      if (defined(obj.nonce)) {
        var len = encodings.bytes.encodingLength(obj.nonce)
        length += 1 + len
      }
      if (defined(obj.sig)) {
        var len = encodings.bytes.encodingLength(obj.sig)
        length += 1 + len
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.pub)) {
        buf[offset++] = 10
        encodings.bytes.encode(obj.pub, buf, offset)
        offset += encodings.bytes.encode.bytes
      }
      if (defined(obj.wk)) {
        buf[offset++] = 18
        encodings.bytes.encode(obj.wk, buf, offset)
        offset += encodings.bytes.encode.bytes
      }
      if (defined(obj.nonce)) {
        buf[offset++] = 26
        encodings.bytes.encode(obj.nonce, buf, offset)
        offset += encodings.bytes.encode.bytes
      }
      if (defined(obj.sig)) {
        buf[offset++] = 34
        encodings.bytes.encode(obj.sig, buf, offset)
        offset += encodings.bytes.encode.bytes
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        pub: null,
        wk: null,
        nonce: null,
        sig: null
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.pub = encodings.bytes.decode(buf, offset)
          offset += encodings.bytes.decode.bytes
          break
          case 2:
          obj.wk = encodings.bytes.decode(buf, offset)
          offset += encodings.bytes.decode.bytes
          break
          case 3:
          obj.nonce = encodings.bytes.decode(buf, offset)
          offset += encodings.bytes.decode.bytes
          break
          case 4:
          obj.sig = encodings.bytes.decode(buf, offset)
          offset += encodings.bytes.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  AddAdmin.encodingLength = encodingLength
  AddAdmin.encode = encode
  AddAdmin.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.type)) {
      var len = encodings.string.encodingLength(obj.type)
      length += 1 + len
    }
    if (defined(obj.key)) {
      var len = encodings.bytes.encodingLength(obj.key)
      length += 1 + len
    }
    if (defined(obj.value)) {
      var len = Value.encodingLength(obj.value)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.type)) {
      buf[offset++] = 10
      encodings.string.encode(obj.type, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.key)) {
      buf[offset++] = 18
      encodings.bytes.encode(obj.key, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (defined(obj.value)) {
      buf[offset++] = 26
      varint.encode(Value.encodingLength(obj.value), buf, offset)
      offset += varint.encode.bytes
      Value.encode(obj.value, buf, offset)
      offset += Value.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      type: "",
      key: null,
      value: null
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.type = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 2:
        obj.key = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 3:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.value = Value.decode(buf, offset, offset + len)
        offset += Value.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
